/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(($, Drupal, debounce, dragula) => {
  const idAttr = 'data-lpb-id';

  function attachUiElements($container, id, settings) {
    const lpbBuilderSettings = settings.lpBuilder || {};
    const uiElements = lpbBuilderSettings.uiElements || {};
    const containerUiElements = uiElements[id] || [];
    containerUiElements.forEach(uiElement => {
      const {
        element,
        method
      } = uiElement;
      $container[method](element);
    });
    Drupal.behaviors.AJAX.attach($container[0], drupalSettings);
  }

  function doReorderComponents($element) {
    const id = $element.attr(idAttr);
    const order = $('.js-lpb-component', $element).get().map(item => {
      const $item = $(item);
      return {
        uuid: $item.attr('data-uuid'),
        parentUuid: $item.parents('.js-lpb-component').first().attr('data-uuid') || null,
        region: $item.parents('.js-lpb-region').first().attr('data-region') || null
      };
    });
    Drupal.ajax({
      url: `${drupalSettings.path.baseUrl}${drupalSettings.path.pathPrefix}layout-paragraphs-builder/${id}/reorder`,
      submit: {
        components: JSON.stringify(order)
      }
    }).execute();
  }

  const reorderComponents = debounce(doReorderComponents);

  function moveErrors(settings, el, target, source, sibling) {
    return Drupal._lpbMoveErrors.map(validator => validator.apply(null, [settings, el, target, source, sibling])).filter(errors => errors !== false && errors !== undefined);
  }

  function updateMoveButtons($element) {
    $element.find('.lpb-up, .lpb-down').attr('tabindex', '0');
    $element.find('.js-lpb-component:first-of-type .lpb-up, .js-lpb-component:last-of-type .lpb-down').attr('tabindex', '-1');
  }

  function hideEmptyRegionButtons($element) {
    $element.find('.js-lpb-region').each((i, e) => {
      const $e = $(e);

      if ($e.find('.js-lpb-component').length === 0) {
        $e.find('.lpb-btn--add.center').css('display', 'block');
      } else {
        $e.find('.lpb-btn--add.center').css('display', 'none');
      }
    });
  }

  function updateUi($element) {
    reorderComponents($element);
    updateMoveButtons($element);
    hideEmptyRegionButtons($element);
  }

  function move($moveItem, direction) {
    const $sibling = direction === 1 ? $moveItem.nextAll('.js-lpb-component').first() : $moveItem.prevAll('.js-lpb-component').first();
    const method = direction === 1 ? 'after' : 'before';
    const {
      scrollY
    } = window;
    const destScroll = scrollY + $sibling.outerHeight() * direction;
    const distance = Math.abs(destScroll - scrollY);

    if ($sibling.length === 0) {
      return false;
    }

    $({
      translateY: 0
    }).animate({
      translateY: 100 * direction
    }, {
      duration: Math.max(100, Math.min(distance, 500)),
      easing: 'swing',

      step() {
        const a = $sibling.outerHeight() * (this.translateY / 100);
        const b = -$moveItem.outerHeight() * (this.translateY / 100);
        $moveItem.css({
          transform: `translateY(${a}px)`
        });
        $sibling.css({
          transform: `translateY(${b}px)`
        });
      },

      complete() {
        $moveItem.css({
          transform: 'none'
        });
        $sibling.css({
          transform: 'none'
        });
        $sibling[method]($moveItem);
        $moveItem.closest(`[${idAttr}]`).trigger('lpb-component:move', [$moveItem.attr('data-uuid')]);
      }

    });

    if (distance > 50) {
      $('html, body').animate({
        scrollTop: destScroll
      });
    }
  }

  function nav($item, dir, settings) {
    const $element = $item.closest(`[${idAttr}]`);
    $item.addClass('lpb-active-item');

    if (dir === -1) {
      $('.js-lpb-region .lpb-btn--add.center, .lpb-layout:not(.lpb-active-item)', $element).before('<div class="lpb-shim"></div>');
    } else if (dir === 1) {
      $('.js-lpb-region', $element).prepend('<div class="lpb-shim"></div>');
      $('.lpb-layout:not(.lpb-active-item)', $element).after('<div class="lpb-shim"></div>');
    }

    const targets = $('.js-lpb-component, .lpb-shim', $element).toArray().filter(i => !$.contains($item[0], i)).filter(i => i.className.indexOf('lpb-layout') === -1 || i === $item[0]);
    const currentElement = $item[0];
    let pos = targets.indexOf(currentElement);

    while (targets[pos + dir] !== undefined && moveErrors(settings, $item[0], targets[pos + dir].parentNode, null, $item.next().length ? $item.next()[0] : null).length > 0) {
      pos += dir;
    }

    if (targets[pos + dir] !== undefined) {
      $(targets[pos + dir])[dir === 1 ? 'after' : 'before']($item);
    }

    $('.lpb-shim', $element).remove();
    $item.removeClass('lpb-active-item').focus();
    $item.closest(`[${idAttr}]`).trigger('lpb-component:move', [$item.attr('data-uuid')]);
  }

  function startNav($item) {
    const $msg = $(`<div id="lpb-navigating-msg" class="lpb-tooltiptext lpb-tooltiptext--visible js-lpb-tooltiptext">${Drupal.t('Use arrow keys to move. Press Return or Tab when finished.')}</div>`);
    $item.closest('.lp-builder').addClass('is-navigating').find('.is-navigating').removeClass('is-navigating');
    $item.attr('aria-describedby', 'lpb-navigating-msg').addClass('is-navigating').prepend($msg);
    $item.before('<div class="lpb-navigating-placeholder"></div>');
  }

  function stopNav($item) {
    $item.removeClass('is-navigating').attr('aria-describedby', '').find('.js-lpb-tooltiptext').remove();
    $item.closest(`[${idAttr}]`).removeClass('is-navigating').find('.lpb-navigating-placeholder').remove();
  }

  function cancelNav($item) {
    const $builder = $item.closest(`[${idAttr}]`);
    $builder.find('.lpb-navigating-placeholder').replaceWith($item);
    updateUi($builder);
    stopNav($item);
  }

  function preventLostChanges($element) {
    const events = ['lpb-component:insert.lpb', 'lpb-component:update.lpb', 'lpb-component:move.lpb', 'lpb-component:drop.lpb'].join(' ');
    $element.on(events, e => {
      $(e.currentTarget).addClass('is_changed');
    });
    window.addEventListener('beforeunload', e => {
      if ($(`.is_changed[${idAttr}]`).length) {
        e.preventDefault();
        e.returnValue = '';
      }
    });
    $('.form-actions').find('input[type="submit"], a').click(() => {
      $element.removeClass('is_changed');
    });
  }

  function attachEventListeners($element, settings) {
    preventLostChanges($element);
    $element.on('click.lp-builder', '.lpb-up', e => {
      move($(e.target).closest('.js-lpb-component'), -1);
      return false;
    });
    $element.on('click.lp-builder', '.lpb-down', e => {
      move($(e.target).closest('.js-lpb-component'), 1);
      return false;
    });
    $element.on('click.lp-builder', '.js-lpb-component', e => {
      $(e.currentTarget).focus();
      return false;
    });
    $element.on('click.lp-builder', '.lpb-drag', e => {
      const $btn = $(e.currentTarget);
      startNav($btn.closest('.js-lpb-component'));
    });
    document.addEventListener('keydown', e => {
      const $item = $('.js-lpb-component.is-navigating');

      if ($item.length) {
        switch (e.code) {
          case 'ArrowUp':
          case 'ArrowLeft':
            nav($item, -1, settings);
            break;

          case 'ArrowDown':
          case 'ArrowRight':
            nav($item, 1, settings);
            break;

          case 'Enter':
          case 'Tab':
            stopNav($item);
            break;

          case 'Escape':
            cancelNav($item);
            break;

          default:
            break;
        }
      }
    });
  }

  function initDragAndDrop($element, settings) {
    const drake = dragula($element.find('.js-lpb-component-list, .js-lpb-region').not('.is-dragula-enabled').get(), {
      accepts: (el, target, source, sibling) => moveErrors(settings, el, target, source, sibling).length === 0,

      moves(el, source, handle) {
        const $handle = $(handle);

        if ($handle.closest('.lpb-drag').length) {
          return true;
        }

        if ($handle.closest('.lpb-controls').length) {
          return false;
        }

        return true;
      }

    });
    drake.on('drop', el => {
      const $el = $(el);

      if ($el.prev().is('a')) {
        $el.insertBefore($el.prev());
      }

      $element.trigger('lpb-component:drop', [$el.attr('data-uuid')]);
    });
    drake.on('drag', el => {
      $element.addClass('is-dragging');

      if (el.className.indexOf('lpb-layout') > -1) {
        $element.addClass('is-dragging-layout');
      } else {
        $element.addClass('is-dragging-item');
      }

      $element.trigger('lpb-component:drag', [$(el).attr('data-uuid')]);
    });
    drake.on('dragend', () => {
      $element.removeClass('is-dragging').removeClass('is-dragging-layout').removeClass('is-dragging-item');
    });
    drake.on('over', (el, container) => {
      $(container).addClass('drag-target');
    });
    drake.on('out', (el, container) => {
      $(container).removeClass('drag-target');
    });
    return drake;
  }

  Drupal._lpbMoveErrors = [];

  Drupal.registerLpbMoveError = f => {
    Drupal._lpbMoveErrors.push(f);
  };

  Drupal.registerLpbMoveError((settings, el, target) => {
    if (el.classList.contains('lpb-layout') && $(target).parents('.lpb-layout').length > settings.nesting_depth) {
      return Drupal.t('Exceeds nesting depth of @depth.', {
        '@depth': settings.nesting_depth
      });
    }
  });
  Drupal.registerLpbMoveError((settings, el, target) => {
    if (settings.require_layouts) {
      if (el.classList.contains('js-lpb-component') && !el.classList.contains('lpb-layout') && !target.classList.contains('js-lpb-region')) {
        return Drupal.t('Components must be added inside sections.');
      }
    }
  });

  Drupal.AjaxCommands.prototype.LayoutParagraphsEventCommand = (ajax, response) => {
    const {
      layoutId,
      componentUuid,
      eventName
    } = response;
    const $element = $(`[data-lpb-id="${layoutId}"]`);
    $element.trigger(`lpb-${eventName}`, [componentUuid]);
  };

  Drupal.behaviors.layoutParagraphsBuilder = {
    attach: function attach(context, settings) {
      $(`.has-components[${idAttr}]`).each((index, element) => {
        const $element = $(element);
        const id = $element.attr(idAttr);
        const lpbSettings = settings.lpBuilder[id];
        $element.once('lpb-enabled').each(() => {
          $element.data('drake', initDragAndDrop($element, lpbSettings));
          attachEventListeners($element, lpbSettings);
          $element.trigger('lpb-builder:init');
        });
        const drake = $element.data('drake');
        $element.find('.js-lpb-region').not('.is-dragula-enabled').addClass('.is-dragula-enabled').get().forEach(c => {
          drake.containers.push(c);
        });
      });
      const events = ['lpb-builder:init.lpb', 'lpb-component:insert.lpb', 'lpb-component:update.lpb', 'lpb-component:move.lpb', 'lpb-component:drop.lpb', 'lpb-component:delete.lpb'].join(' ');
      $('[data-lpb-id]').once('lpb-events').on(events, e => {
        const $element = $(e.currentTarget);
        updateUi($element);
      });
      [`${idAttr}`, 'data-uuid', 'data-region-uuid'].forEach(attr => {
        $(`[${attr}]`).not('.lpb-formatter').not('.has-components').once('lpb-ui-elements').each((i, el) => {
          attachUiElements($(el), el.getAttribute(attr), settings);
        });
      });
    }
  };
  $(window).on('dialog:aftercreate', (event, dialog, $dialog) => {
    if ($dialog.attr('id').indexOf('lpb-dialog-') === 0) {
      const buttons = [];
      const $buttons = $dialog.find('.layout-paragraphs-component-form > .form-actions input[type=submit], .layout-paragraphs-component-form > .form-actions a.button');
      $buttons.each((_i, el) => {
        const $originalButton = $(el).css({
          display: 'none'
        });
        buttons.push({
          text: $originalButton.html() || $originalButton.attr('value'),
          class: $originalButton.attr('class'),

          click(e) {
            if ($originalButton.is('a')) {
              $originalButton[0].click();
            } else {
              $originalButton.trigger('mousedown').trigger('mouseup').trigger('click');
              e.preventDefault();
            }
          }

        });
      });
      $dialog.dialog('option', 'buttons', buttons);
    }
  });
})(jQuery, Drupal, Drupal.debounce, dragula);