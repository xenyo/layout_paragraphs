<?php

/**
 * @file
 * Contains layout_paragraphs.module.
 */

use Drupal;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\layout_paragraphs\Utility\Dialog;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\paragraphs_library\Entity\LibraryItem;

/**
 * Implements hook_help().
 */
function layout_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the layout_paragraphs module.
    case 'help.page.layout_paragraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide layout integration for paragraph fields.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function layout_paragraphs_theme() {
  return [
    'layout_paragraphs' => [
      'variables' => [
        'elements' => '',
        'content' => '',
      ],
    ],
    'layout_paragraphs_builder' => [
      'variables' => [
        'attributes' => [],
        'id' => '',
        'root_components' => [],
        'is_empty' => FALSE,
        'empty_message' => '',
        'insert_button' => '',
        'translation_warning' => '',
        'layout_paragraphs_layout' => NULL,
      ],
    ],
    'layout_paragraphs_builder_formatter' => [
      'variables' => [
        'link_url' => NULL,
        'link_text' => NULL,
        'field_label' => NULL,
        'is_empty' => FALSE,
        'root_components' => [],
      ],
    ],
    'layout_paragraphs_builder_controls' => [
      'variables' => [
        'attributes' => [],
        'controls' => [],
        'layout_paragraphs_layout' => NULL,
        'uuid' => NULL,
        'edit_access' => FALSE,
        'duplicate_access' => FALSE,
        'delete_access' => FALSE,
      ],
    ],
    'layout_paragraphs_builder_component_menu' => [
      'variables' => [
        'attributes' => [],
        'types' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions().
 */
function layout_paragraphs_theme_suggestions_layout_paragraphs(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'layout_paragraphs__' . $sanitized_view_mode;
  $suggestions[] = 'layout_paragraphs__' . $variables['elements']['field_name'];
  $suggestions[] = 'layout_paragraphs__' . $variables['elements']['field_name'] . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_module_implements_alter().
 *
 * If "content_translation", move the form_alter implementation by the
 * layout_paragraphs at the end of the list, so that it might be
 * called after the content_translation one.
 * Otherwise the $form['translatable'] won't be defined in
 * layout_paragraphs_form_field_config_edit_form_alter.
 *
 * @see: https://www.hashbangcode.com/article/drupal-8-altering-hook-weights.
 */
function layout_paragraphs_module_implements_alter(&$implementations, $hook) {
  // Move our hook_entity_type_alter() implementation to the end of the list.
  if ($hook == 'form_alter' && isset($implementations['layout_paragraphs']) && isset($implementations['content_translation'])) {
    $hook_init = $implementations['layout_paragraphs'];
    unset($implementations['layout_paragraphs']);
    $implementations['layout_paragraphs'] = $hook_init;
  }
}

/**
 * Implements hook_prepreprocess_radios().
 *
 * Add wrapper class for layout selection.
 */
function layout_paragraphs_preprocess_radios(&$variables) {
  if (isset($variables['element']['#wrapper_attributes'])) {
    $variables['attributes'] += $variables['element']['#wrapper_attributes'];
  }
}

/**
 * Implements hook_preprocess_layout_paragraphs_builder_controls().
 *
 * @todo Consider adding an alter/info hook for altering this output.
 */
function layout_paragraphs_preprocess_layout_paragraphs_builder_controls(&$variables) {
  /** @var \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout */
  $layout = $variables['layout_paragraphs_layout'];
  $uuid = $variables['uuid'];
  $component = $layout->getComponentByUuid($uuid);
  $entity = $component->getEntity();
  $id = Html::getUniqueId('lpb-controls');

  $variables['controls'] += [
    'drag_handle' => [
      '#type' => 'link',
      '#title' => t('Drag'),
      '#url' => Url::fromUri('internal:#move'),
      '#attributes' => [
        'class' => [
          'lpb-drag',
          'lpb-tooltip--hover',
          'lpb-tooltip--focus',
        ],
        'aria-describedy' => $id . '--tip',
      ],
      '#weight' => 10,
    ],
    'nav_tooltip' => [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => [
          'lpb-tooltiptext',
        ],
        'id' => $id . '--tip',
      ],
      '#value' => t('Drag or click and use arrow keys to move. <br />Press Return or Tab when finished.'),
      '#weight' => 20,
    ],
    'label' => [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => ['lpb-controls-label'],
      ],
      '#value' => $entity->getParagraphType()->label,
      '#weight' => 30,
    ],
    'move_up' => [
      '#type' => 'link',
      '#title' => t('Move up'),
      '#url' => Url::fromUri('internal:#move-up'),
      '#attributes' => [
        'class' => ['lpb-up'],
      ],
      '#weight' => 40,
    ],
    'move_down' => [
      '#type' => 'link',
      '#url' => Url::fromUri('internal:#move-down'),
      '#title' => t('Move down'),
      '#attributes' => [
        'class' => ['lpb-down'],
      ],
      '#weight' => 50,
    ],
    'edit_link' => [
      '#type' => 'link',
      '#url' => Url::fromRoute('layout_paragraphs.builder.edit_item', [
        'layout_paragraphs_layout' => $layout->id(),
        'component_uuid' => $entity->uuid(),
      ]),
      '#title' => t('Edit'),
      '#attributes' => [
        'class' => [
          'lpb-edit',
          'use-ajax',
        ],
        'data-dialog-type' => 'dialog',
        'data-dialog-options' => Json::encode(Dialog::dialogSettings($layout)),
      ],
      '#access' => $variables['edit_access'],
      '#weight' => 60,
    ],
    'duplicate_link' => [
      '#type' => 'link',
      '#url' => Url::fromRoute('layout_paragraphs.builder.duplicate_item', [
        'layout_paragraphs_layout' => $layout->id(),
        'source_uuid' => $entity->uuid(),
      ]),
      '#title' => t('Duplicate'),
      '#attributes' => [
        'class' => [
          'lpb-duplicate',
          'use-ajax',
        ],
      ],
      '#access' => $variables['duplicate_access'],
      '#weight' => 65,
    ],
    'delete_link' => [
      '#type' => 'link',
      '#url' => Url::fromRoute('layout_paragraphs.builder.delete_item', [
        'layout_paragraphs_layout' => $layout->id(),
        'component_uuid' => $entity->uuid(),
      ]),
      '#title' => t('Delete'),
      '#attributes' => [
        'class' => [
          'lpb-delete',
          'use-ajax',
        ],
        'data-dialog-type' => 'dialog',
        'data-dialog-options' => Json::encode([
          'modal' => TRUE,
          'target' => Dialog::dialogId($layout),
          'dialogClass' => 'lpb-dialog',
        ]),
      ],
      '#access' => $variables['delete_access'],
      '#weight' => 70,
    ],
  ];
  if ($component->isLayout()) {
    $variables['attributes']['class'][] = 'is-layout';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Adds the layout paragraphs form fields to "Manage form display" tab.
 */
function layout_paragraphs_entity_extra_field_info() {
  $extra = [];
  foreach (ParagraphsType::loadMultiple() as $paragraphs_type) {
    if ($paragraphs_type->hasEnabledBehaviorPlugin('layout_paragraphs')) {
      $extra['paragraph'][$paragraphs_type->id()]['form']['layout_paragraphs_fields'] = [
        'label' => t('Layout selection and configuration form'),
        'visible' => TRUE,
        'weight' => -200,
      ];
    }
  }
  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function layout_paragraphs_form_layout_paragraphs_component_form_alter(&$form, FormStateInterface $form_state) {
  _layout_paragraphs_form_field_weights($form, $form_state);
  _layout_paragraphs_form_paragraphs_library($form, $form_state);
}

/**
 * Adjusts the field weight based on settings from "Manage form display" tab.
 */
function _layout_paragraphs_form_field_weights(array &$form, FormStateInterface $form_state) {
  $display = $form['#display'];
  if ($layout_paragraphs_fields = $display->getComponent('layout_paragraphs_fields')) {
    $form['layout_paragraphs']['#weight'] = $layout_paragraphs_fields['weight'];
  }
}

/**
 * Provides Paragraphs Library module integration.
 */
function _layout_paragraphs_form_paragraphs_library(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $paragraph = $form_object->getParagraph();
  $paragraph_type = $paragraph->getParagraphType();

  // Only applies to paragraph types that allow being promoted to library.
  // Section paragraphs cannot be used as library items.
  $allow_library_conversion =
    $paragraph_type->getThirdPartySetting('paragraphs_library', 'allow_library_conversion', FALSE)
    && !$paragraph_type->hasEnabledBehaviorPlugin('layout_paragraphs');
  if ($allow_library_conversion) {
    $form['actions']['promote_to_library'] = [
      '#type' => 'submit',
      '#value' => t('Promote to library'),
      '#submit' => ['layout_paragraphs_paragraphs_library_submit'],
      '#name' => 'promote-to-library',
      '#ajax' => [
        'callback' => 'layout_paragraphs_paragraphs_library_ajax',
      ],
      '#weight' => 110,
    ];
    // Fix inline_entity_form compabitility.
    // @see https://www.drupal.org/project/inline_entity_form/issues/2830136
    if ($form['actions']['submit']['#ief_submit_trigger']) {
      $form['actions']['promote_to_library']['#ief_submit_trigger'] = TRUE;
      $form['actions']['promote_to_library']['#ief_submit_trigger_all'] = TRUE;
      array_unshift($form['actions']['promote_to_library']['#submit'], $form['actions']['submit']['#submit'][0]);
    }
  }
}

/**
 * Form submit callback for "Promote to library" button.
 */
function layout_paragraphs_paragraphs_library_submit(&$form, FormStateInterface $form_state) {

  $tempstore = Drupal::service('layout_paragraphs.tempstore_repository');
  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $paragraph = $form_object->buildParagraphComponent($form, $form_state);
  $layout_paragraphs_layout = $form_object->getLayoutParagraphsLayout();
  $component = $layout_paragraphs_layout->getComponent($paragraph);
  $component_settings = $component->getSettings();

  $form_state->set('original_paragraph', $paragraph);

  // Replacing element in the array.
  $library_item = LibraryItem::createFromParagraph($paragraph);
  $library_item->save();

  // Replace this paragraph with a library reference one.
  $library_paragraph = Paragraph::create([
    'type' => 'from_library',
    'field_reusable_paragraph' => $library_item,
  ]);
  $library_component = $layout_paragraphs_layout->getComponent($library_paragraph);
  $library_component->setSettings($component_settings);
  $form_object->setParagraph($library_component->getEntity());

  if (get_class($form_object) == 'Drupal\layout_paragraphs\Form\EditComponentForm') {
    $layout_paragraphs_layout->insertBeforeComponent($paragraph->uuid(), $library_component->getEntity());
    $layout_paragraphs_layout->deleteComponent($paragraph->uuid());
    $form_object->setLayoutParagraphsLayout($layout_paragraphs_layout);
    $tempstore->set($form_object->getLayoutParagraphsLayout());
  }
  elseif (get_class($form_object) == 'Drupal\layout_paragraphs\Form\InsertComponentForm') {
    $form_object->setParagraph($library_component->getEntity());
    /** @var \Drupal\layout_paragraphs\Form\InsertComponentForm $form_object */
    $form_object->insertComponent();
    $tempstore->set($form_object->getLayoutParagraphsLayout());
  }

}

/**
 * Ajax callback for "Promote to library" button.
 */
function layout_paragraphs_paragraphs_library_ajax(&$form, FormStateInterface $form_state) {

  // Check for errors.
  if ($form_state->hasAnyErrors()) {
    $form['status_messages'] = [
      '#type' => 'status_messages',
      '#weight' => -1000,
    ];
    $form['#sorted'] = FALSE;
    $response = new AjaxResponse();
    $response->addCommand(new ReplaceCommand('[data-drupal-selector="' . $form['#attributes']['data-drupal-selector'] . '"]', $form));
    return $response;
  }

  $original_paragraph = $form_state->get('original_paragraph');
  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  if (get_class($form_object) == 'Drupal\layout_paragraphs\Form\EditComponentForm') {
    $response = $form_object->successfulAjaxSubmit($form, $form_state);
    $wrong_selector = '[data-uuid=' . $form_object->getParagraph()->uuid() . ']';
    $correct_selector = '[data-uuid=' . $original_paragraph->uuid() . ']';
    foreach ($response->getCommands() as &$command) {
      if ($command['command'] == 'insert' && $command['selector'] == $wrong_selector) {
        $command['selector'] = $correct_selector;
      }
    };
    return $response;
  }
  else {
    return $form_object->successfulAjaxSubmit($form, $form_state);
  }
}

/**
 * Implements hook_ENTITY_presave().
 *
 * Updates references to parent layout section uuids in cases
 * where paragraphs are duplicated, for example when using the
 * Replicate module.
 *
 * @todo Consider changing approach if this issue is addressed in core:
 * https://www.drupal.org/project/drupal/issues/3040556
 * (It is not possible to react to an entity being duplicated)
 */
function layout_paragraphs_paragraph_presave(Paragraph $paragraph) {
  $behavior_settings = $paragraph->getAllBehaviorSettings();
  $parent_uuid = $behavior_settings['layout_paragraphs']['parent_uuid'] ?? NULL;
  if (empty($parent_uuid)) {
    return;
  }

  // If there is no host, the parent hasn't been saved and we are not cloning.
  $host = $paragraph->getParentEntity();
  if (empty($host)) {
    return;
  }

  // If the parent component cannot be loaded, we are not cloning.
  $parent_component = \Drupal::service('entity.repository')
    ->loadEntityByUuid('paragraph', $parent_uuid);
  if (empty($parent_component)) {
    return;
  }

  // If the parent component does not have a parent entity, we are not cloning.
  $parent_host = $parent_component->getParentEntity();
  if (empty($parent_host)) {
    return;
  }

  // If the current paragraph's host's id does not match
  // the paragraph's parent's host's id, we ARE cloning.
  if ($host->id() !== $parent_host->id()) {

    // Map the UUIDs to deltas from the clone source.
    $items = _layout_paragraphs_get_paragraphs($parent_component);
    foreach ($items as $delta => $item) {
      $uuid_map[$item->uuid()] = $delta;
    }

    // Map the deltas to UUIds from the clone destination.
    $items = _layout_paragraphs_get_paragraphs($paragraph);
    $delta_map = [];
    foreach ($items as $delta => $item) {
      $delta_map[$delta] = $item->uuid();
    }

    // Assign the correct uuid.
    $parent_delta = $uuid_map[$parent_uuid];
    $correct_uuid = $delta_map[$parent_delta];

    // Since paragraph::preSave() has already been called,
    // we have to set the serialized behavior settings directly
    // rather than using setBehaviorSettings().
    $behavior_settings['layout_paragraphs']['parent_uuid'] = $correct_uuid;
    $paragraph->set('behavior_settings', serialize($behavior_settings));
  }
}

/**
 * Returns a list of all sibling paragraphs given a single paragraph.
 *
 * The returned list contains all of the referenced entities,
 * including the passed $paragraph.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph to use for finding the complete list of siblings.
 *
 * @return \Drupal\Core\Field\EntityReferenceFieldItemList
 *   The list of paragraphs.
 */
function _layout_paragraphs_get_paragraphs(Paragraph $paragraph) {
  $host = $paragraph->getParentEntity();
  $parent_field = $paragraph->get('parent_field_name');
  $field_name = $parent_field->first()->getString();
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $item_list */
  $item_list = $host->get($field_name);
  return $item_list->referencedEntities();
}
